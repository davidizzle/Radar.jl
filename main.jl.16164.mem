        - # Load your local modules
        - include("src/parameters.jl")
        - include("src/constants.jl")
        - include("src/target.jl")
        - include("src/swerling.jl")
        - include("src/radarprocessing.jl")
        - include("src/Radar.jl")
        - include("src/RadarUI.jl")
        - # include("src/utils.jl")
        - 
        - # using Radar
        - # using RadarProcessingChain
        - # using RadarUI
        - # using Targets
        - using REPL.TerminalMenus
        - using GLMakie
        - 
        - println("\e[38;5;83mWelcome to my radar simulator, Radar.jl!")
        - mode = while(true)
       80     options = ["Spawn", "Game", "Quit"]
       32     selection = request("Choose a Radar mode:", RadioMenu(options))
        0     chosen_mode = options[selection]
        -     
        0     if options[selection] == "Quit"
        0         println("Exiting the radar simulator.\e[37m")
        0         exit(0)
        0     elseif options[selection] == "Spawn"
       16         println("Spawn mode activated!")
        -     else
        0         println("Game mode activated!")
        -     end
        -     
        0     return chosen_mode
        - end
        - 
        - 
        - liveTargets = Vector{Targets.Target}(
        -                     [Targets.CartesianTarget(randn() * 100e3 + 100e3, randn() * 100e3 + 100e3, randn(), randn(); swerlingModel = :Swerling0, rcs = 1.0, status = :unknown) for _ in 1:10]  # Randomly generated targets
        -                 ) # Live targets to be processed
        - 
        - GC.enable(true)
        - # Initialize system
        - # radar = Radar.initRadar()
        - radar = Radar.pulseRadar()
        - # targets = generateTargets()
        - fig, fig2, azimuth, beamPoints, targetDots, echo, compression, doppler = RadarUI.setupRadarDisplay(radar, liveTargets; initialAzimuth = radar.azimuth)
        - 
        - @async begin
        -     try 
        -         RadarUI.updateDisplay(azimuth, beamPoints, targetDots, echo, compression, doppler, radar)
        -     catch e
        -         println("Error in updateDisplay: $e")
        -     end
        - end
        - # Show the UI
        - 
        - # Wow, this works!
        - display(GLMakie.Screen(), fig)
        - display(GLMakie.Screen(), fig2)
        - 
        - 
        - # Start live radar
        - Radar.runRadar(radar, liveTargets)
        - 
        - @async RadarUI.updateTargetDots(targetDots)
        - 
        - println("Press Enter to close the radar display...")
        - 
        - readline()
        - println("Radar display closed.\e[37m")
