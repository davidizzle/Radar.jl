        - module RadarUI
        -     using GLMakie
        -     using Plots
        -     using GeometryBasics
        -     using Observables
        -     using Dates
        -     using ..Radar
        -     using ..Targets
        -     # using .Radar
        - 
        -     struct TargetDetection
        -         target::Targets.Target
        -         position::Point2f
        -         detection_time::Float64 # Using `time()` for this
        -         outerColor::RGBAf
        -         innerColor::RGBAf
        -         initial_alpha::Float64  # Store the initial transparency
        -         lifetime::Float64       # How long the dot should be visible (in seconds)
        -     end
        - 
        -     const TRAIL_LENGTH = 30
        -     beamHistory = Observable(Vector{Vector{Point2f}}())
        - 
        -     function polarToCartesian(θ_deg, r)
        -         θ_rad = deg2rad(θ_deg)
        -         # println(θ_rad)
        -         return Point2f(r * cos(θ_rad), r * sin(θ_rad))
        -     end
        -     
        -     function updateBeamTrail!(currentAzimuth::Float64, maxRange::Float64)
        -         newBeam = [Point2f(0, 0), polarToCartesian(currentAzimuth, maxRange)]
        - 
        -         if length(beamHistory[]) >= TRAIL_LENGTH
        -             popfirst!(beamHistory[])
        -         end
        - 
        -         push!(beamHistory[], newBeam)
        -         notify(beamHistory)
        -     end
        - 
        0     function setupRadarDisplay(radar::Radar.pulseRadar, targets; maxRange=5.0, initialAzimuth=0.0)
        0         fig = Figure(size=(1920, 1080), backgroundcolor=:black)
        - 
        -         # Echo Section
        0         ax_echo = Axis(fig[1, 1],
        -         xlabel="Range (Km)", ylabel="Amplitude",
        -         title="Echo", limits=(0, radar.datacube.rangeBins, 1e-2, 1e2), yscale=log10
        -         )
        - 
        -         # echo_data = Observable(radar.datacube.data[:, 1, 1]) 
        0         echo_data = Observable(radar.echo) 
        -         # Create a lifted observable of absolute values
  5454170         echo = lift(x -> abs.(x), echo_data)
      192         lines!(ax_echo, 1:length(echo[]), echo, color=:blue)
        -         
        -         # Pulse Compression Section
        0         ax_pc = Axis(fig[1, 2],
        -         xlabel="Range (Km)", ylabel="Amplitude",
        -         title="Echo", limits=(0, radar.datacube.rangeBins, 1e-2, 1e2), yscale=log10
        -         )
        0         pc_data = Observable(radar.compressedEcho) # Example: 500 points
  5454154         pc = lift(x -> abs.(x), pc_data)
       80         lines!(ax_pc, 1:length(pc[]), pc, color=:blue)
        - 
        -         # Doppler Processing Section
        0         ax_dopp = Axis(fig[1, 3], xlabel="Range (Km)", ylabel="Velocity",
        -         title="Echo")
        -         # dopp = Observable(abs.(radar.datacube.data[:, :, 1])) 
        0         dopp = Observable(radar.dopplerEcho) 
163319850         abs_dopp = lift(x -> abs.(x), dopp)
        -         # @show typeof(radar.datacube.data[:, :, 1])   # should be Matrix{ComplexF64}
        -         # @show size(radar.datacube.data[:, :, 1])  
      128         GLMakie.heatmap!(ax_dopp, abs_dopp, colormap=:viridis, colorrange=(0, 50))
        - 
        - 
        -         # Radar PPI Section
        -         # Vector of observable dots
        0         fig2 = Figure(size=(1080, 1080), backgroundcolor=:black)
       32         detectionDots = Observable(TargetDetection[]) 
        0         tempPos = [Point2f(Targets.toCartesian(t).x/1e5, Targets.toCartesian(t).y/1e5)  for t in targets]
        -         # print(tempPos)
       80         dot_position_lift = @lift [td.position for td in $detectionDots]
       80         dot_color_lift = @lift begin
        0             current_time = time()
       32             colors = Vector{RGBAf}()
        0             for td in $detectionDots
        0                 time_since_detection = current_time - td.detection_time
        0                 remaining_lifetime_ratio = 1.0 - (time_since_detection / td.lifetime)
        0                 alpha = max(0.0, td.initial_alpha * remaining_lifetime_ratio) # Fade out
        0                 push!(colors, RGBAf(1.0, 1.0, 0.0, alpha)) # Yellow dot, fading alpha
        0             end
        -             colors
        -         end
        - 
        -         
        0         ax = Axis(fig2[1,1],
        -         backgroundcolor=:black,
        -         xgridcolor=:gray,
        -         ygridcolor=:gray,
        -         xlabel="X", ylabel="Y",
        -         limits = (-maxRange, maxRange, -maxRange, maxRange),
        -         )
        -         
      128         GLMakie.scatter!(ax, tempPos, 
        -         # color=dot_color_lift,
        -          markersize=15, strokewidth=1, strokecolor=:white)
        -         # Draw concentric circles
        0         step = maxRange / 5
        0         for r in step:step:2*maxRange
    30726             lines!(ax, [polarToCartesian(θ, r) for θ in 0:1:360], color=:gray, linewidth=0.5)
        0         end
        - 
        -         # General background section
        -         # Draw radial spokes
        0         for θ in 0:30:330
     1344             lines!(ax, [Point2f(0, 0), polarToCartesian(θ, maxRange)], color=:gray, linewidth=0.5)
        0         end
        - 
        0         for i in 1:TRAIL_LENGTH
        0             alpha = 0.5 - (i - 1) / TRAIL_LENGTH / 2
      480             lineplot = lift(beamHistory) do beams
        -                 i ≤ length(beams) ? beams[end - i + 1] : [Point2f(0, 0), Point2f(0, 0)]
        -             end
     2016             lines!(ax, lineplot, color=(:green, alpha), linewidth=2)
        0         end
        - 
       16         azimuthDeg = Observable(initialAzimuth)
        -         beam_start = Point2f(0, 0)
        0         beam_end = polarToCartesian(initialAzimuth, maxRange)
       80         beamPoints = Observable([beam_start, beam_end])
        - 
       32         lines!(ax, beamPoints, color=:green, linewidth=2)
        - 
      224         return fig, fig2, azimuthDeg, beamPoints, detectionDots, echo_data, pc_data, dopp
        -     end
        - 
        -     function updateDisplay(az::Observable, beamPoints::Observable, detectionDots::Observable, echo::Observable, compression::Observable, doppler::Observable, radar::Radar.pulseRadar)
        - 
        0         range = Float64(sqrt(beamPoints[][2][1]^2 + beamPoints[][2][2]^2))
        -         while true
        -             # echo[] = radar.datacube.data[:, 1, 1] # Update echo data
        0             echo[] = radar.echo # Update echo data
        0             compression[] = radar.compressedEcho # Update compressed echo data
        -             # pc_data[] = radar.datacube.data[:, 1, 1] # Update
        0             az[] = radar.azimuth
        0             notify(az)
        -             
        -             # Update beam endpoint
        0             newEnd = polarToCartesian(az[], range)
        -             # beamPoints[][2] = newEnd
        -             # println("Updating display 3...")
     9696             beamPoints[] = [Point2f(0,0), newEnd]
        -             # beamPoints[][2] =  newEnd
     1616             notify(beamPoints)
        -             # updateBeamTrail!(az[], range)
        - 
        -             # try
        -             #     if maximum(abs.(radar.datacube[:, :, 1])) > 3
        -             #         hm = Plots.heatmap(abs.(radar.dopplerEcho), title="Doppler Heatmap", xlabel="Pulse", ylabel="Range Bin", colorbar_title="Amplitude", yflip=true, clims=(0, 50))
        -             #         display(hm)
        -             #     end
        -             # catch e
        -             #     println("Error in heatmap display: $e")
        -             # end
        - 
     1616             doppler[] .= radar.dopplerEcho # Update Doppler data
        0             notify(doppler)
        -             # doppler[] .= abs.(radar.datacube.data[:, :, 1]) # Update Doppler data
        -             
    19856             sleep(1e-2)
        -         end
        -     end
        - 
        -     function updateTargetDots(targetDots::Vector{TargetDetection})
        -         while true
        0             for dot in targetDots
        0                     updatePosition(dot.target)
        0             end
        0             sleep(1e-2)  # Sleep to avoid busy-waiting
        -         end
        -     end
        - 
        -     export setupRadarDisplay, runRadar
        - end
